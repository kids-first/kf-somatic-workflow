cwlVersion: v1.0
class: Workflow
id: kfdrc_consensus_calling
label: Kids First DRC Simple Variant Consensus Calling Workflow
doc: |
  # Kids First DRC Consensus Calling Workflow
  This workflow is used by the Kids First (KF) Data Resource Center (DRC) to create consensus calls from outputs generated by our somatic variant callers.

  ![data service logo](https://github.com/d3b-center/d3b-research-workflows/raw/master/doc/kfdrc-logo-sm.png)

  This workflow takes the protected vcf outputs from the [Kids First DRC Somatic Workflow](workflow/kfdrc-somatic-variant-workflow.cwl) and creates protected and public consensus VCF and MAF files.
  The general outline is as follows:

  1. Prep MNP Variants
     - Strelka2 outputs multi-nucleotide polymorphisms (MNPs) as consecutive single-nucleotide polymorphisms
     - In order preserve MNPs, we gather MNP calls from the other caller inputs, and search for evidence supporting these consecutive SNP calls as MNP candidates
      - Once found, the Strelka2 SNP calls supporting a MNP are converted to a single MNP call
      - This is done to preserve the predicted gene model as accurately as possible in our consensus calls
  1. Consensus merge
     - Calls are gathered from all four callers
     - By default, calls with support from 2+ callers OR calls that are marked as `HotSpotAllele` in the `INFO` field are retained
     - Retained calls then have their `MQ` and `MQ0` values calculated from the input tumor cram
     - `GT` fields are estimated as "majority rules," and when no majority exists, set as `0/1` by default
     - `AD`, `DP`, and `AF` are calculated as the average value between callers
     - `ADR`, `DPR`, and `AFR` fields are added as the range of values from the previous point, to give the observer a sense on confidence in the value
  1. VEP Annotate Consensus
  1. BCF tools annotate
     - Additional annotation is performed augment VEP annotation
     - While VEP does have extensive gnomad allele frequency annotation, it is limited to exome values. The added gnomad AF only resource we use augments this as an additional `INFO/AF` field to add WGS frequencies
  1. Soft filter variants
     - A soft filter is added based on criteria provided
     - By default, we perform soft filtering as outlined in the [KFDRC Annotation Subworkflow](kfdrc_annotation_subworkflow.md#workflow_description_and_kf_recommended_inputs)
  1. VCF2MAF protected
     - Here, for convenience of analysis we convert the resultant, soft-filtered VCF (AKA, "Protected VCF") into MAF format
  1. Hard filter VCF
     - The Protected VCF is hard filtered on `PASS` and `HotSpotAllele` for reasons outlined in the `Soft filter variants` step
     - This VCF is known as the "Public VCF"
  1. VCF2MAF public
  1. Rename outputs

  ![Consensus workflow](kfdrc-consensus-calling.png)

  ## Workflow Description and KF Recommended Inputs

  ### General workflow inputs:
  ```yaml
  inputs:
    indexed_reference_fasta: {type: 'File', secondaryFiles: ['.fai', '^.dict'], 
                              "sbg:suggestedValue": {class: File, path: 60639014357c3a53540ca7a3, name: Homo_sapiens_assembly38.fasta,
                              secondaryFiles: [{class: File, path: 60639016357c3a53540ca7af, name: Homo_sapiens_assembly38.fasta},
                              {class: File, path: 60639019357c3a53540ca7e7, name: Homo_sapiens_assembly38.dict}]
                              }}
    strelka2_vcf: {type: 'File', secondaryFiles: ['.tbi']}
    mutect2_vcf: {type: 'File', secondaryFiles: ['.tbi']}
    lancet_vcf: {type: 'File', secondaryFiles: ['.tbi']}
    vardict_vcf: {type: 'File', secondaryFiles: ['.tbi']}
    cram: {type: 'File', secondaryFiles: ['.crai'], doc: "Tumor cram recommended for MQ score calculation"}
    input_tumor_name: string
    input_normal_name: string
    output_basename: string
    tool_name: {type: 'string?', default: "consensus_somatic", doc: "A helpful file name building component"}
    ncallers: {type: 'int?', doc: "Optional number of callers required for consensus [2]",
      default: 2}
    consensus_ram: {type: 'int', doc: "Set min memory in GB for consensus merge step", default: 3}
    annotation_vcf: {type: 'File', secondaryFiles: ['.tbi'], doc: "VCF of annotations to add to consensus variants, e.g. gnomAD allele frequency",
                     "sbg:suggestedValue": {class: File, path: 5f50018fe4b054958bc8d2e3, name: af-only-gnomad.hg38.vcf.gz,
                     secondaryFiles: [{class: File, path: 5f50018fe4b054958bc8d2e5, name: af-only-gnomad.hg38.vcf.gz.tbi}]
                     }}
    vep_cache: {type: 'File', doc: "tar gzipped cache from ensembl/local converted cache",
      "sbg:suggestedValue": {class: File, path: 607713829360f10e3982a425, name: homo_sapiens_vep_93_GRCh38.tar.gz}}
    annot_columns: {type: 'string?', default: 'INFO/AF', doc: "column from annotation_vcf to add to consensus VCF; defaults to 'INFO/AF'"}
    filter_names: {type: 'string[]?', default: [ "NORM_DP_LOW", "GNOMAD_AF_HIGH" ], doc: "Names of filters to be added to consensus VCF;\
       \ default values set"}
    depth_lowerbound: {type: 'int?', default: 7, doc: "Normal-sample read depth at which to apply depth filter; default set"}
    frequency_upperbound: {type: 'float?', default: 0.001, doc: "Population allele frequency above which to apply frequency filter; default set"}
    bcftools_public_filter: {type: 'string?', doc: 'Will hard filter final result to create a public version, e.g. FILTER="PASS"|INFO/HotSpotAllele=1; default set', default: 'FILTER="PASS"|INFO/HotSpotAllele=1'}
    retain_info: {type: 'string?', doc: "csv string with INFO fields that you want to keep; default values set", default: 'MQ,MQ0,CAL,HotSpotAllele'}
    retain_fmt: {type: 'string?', doc: "csv string with FORMAT fields that you want to keep"}
    maf_center: {type: 'string?', doc: "Sequencing center of variant called", default: "."}
  ```

  ### Recommended reference inputs - all file references can be obtained [here](https://cavatica.sbgenomics.com/u/kfdrc-harmonization/kf-references/)
  Secondary files needed for each reference file will be a sub-bullet point
   - `indexed_reference_fasta`: `Homo_sapiens_assembly38.fasta`
     - `Homo_sapiens_assembly38.fasta.fai`
     - `Homo_sapiens_assembly38.dict`
   - `bcftools_annot_columns`: "INFO/AF"
   - `annotation_vcf`: `af-only-gnomad.hg38.vcf.gz`
     - `af-only-gnomad.hg38.vcf.gz.tbi`
   - `bcftools_public_filter`: 'FILTER="PASS"|INFO/HotSpotAllele=1'
   - `vep_cache`: `homo_sapiens_vep_93_GRCh38.tar.gz`
   - `tool_name`: "consensus_somatic"

  ### Situational inputs
   - `depth_lowerbound`: Change this `int` if you believe the threshold for `NORM_DP_LOW` should be different
   - `frequency_upperbound` Change this `float` if you believe the max value for `GNOMAD_AF_HIGH` should be different
   - `ncallers`: Change this `int` to adjust the stringency of what is defined as a consensus
   - `consensus_ram`: Change this `int` if the script runs out of memory to increase the size of the instance type used

  ## Workflow outputs
  ```yaml
  outputs:
    annotated_protected_outputs: {type: 'File[]', outputSource: rename_protected/renamed_files}
    annotated_public_outputs: {type: 'File[]', outputSource: rename_public/renamed_files}

  ```
   - `annotated_protected_outputs`: Array of files containing MAF format of PASS hits, `PASS` VCF with annotation pipeline soft `FILTER`-added values, and VCF index
   - `annotated_public_outputs`: Same as above, except MAF and VCF have had entries with soft `FILTER` values removed
requirements:
- class: ScatterFeatureRequirement
- class: SubworkflowFeatureRequirement
- class: MultipleInputFeatureRequirement
- class: StepInputExpressionRequirement
- class: InlineJavascriptRequirement

inputs:
  indexed_reference_fasta: {type: 'File', secondaryFiles: ['.fai', '^.dict'], "sbg:suggestedValue": {
      class: File, path: 60639014357c3a53540ca7a3, name: Homo_sapiens_assembly38.fasta,
      secondaryFiles: [{class: File, path: 60639016357c3a53540ca7af, name: Homo_sapiens_assembly38.fasta},
        {class: File, path: 60639019357c3a53540ca7e7, name: Homo_sapiens_assembly38.dict}]}}
  strelka2_vcf: {type: 'File', secondaryFiles: ['.tbi']}
  mutect2_vcf: {type: 'File', secondaryFiles: ['.tbi']}
  lancet_vcf: {type: 'File', secondaryFiles: ['.tbi']}
  vardict_vcf: {type: 'File', secondaryFiles: ['.tbi']}
  cram: {type: 'File', secondaryFiles: ['.crai'], doc: "Tumor cram recommended for MQ\
      \ score calculation"}
  input_tumor_name: string
  input_normal_name: string
  output_basename: string
  tool_name: {type: 'string?', default: "consensus_somatic", doc: "A helpful file name\
      \ building component"}
  ncallers: {type: 'int?', doc: "Optional number of callers required for consensus [2]",
    default: 2}
  hotspot_source: {type: 'string?', doc: "Optional description of hotspot definition source"}
  contig_bed: {type: 'File?', doc: "Optional BED file containing names of target contigs / chromosomes"}
  consensus_ram: {type: 'int?', doc: "Set min memory in GB for consensus merge step",
    default: 3}
  vep_cache: {type: 'File', doc: "tar gzipped cache from ensembl/local converted cache"}
  vep_ref_build: {type: ['null', string], doc: "Genome ref build used, should line up with cache.", default: "GRCh38" }
  dbnsfp: { type: 'File?', secondaryFiles: [.tbi,^.readme.txt], doc: "VEP-formatted plugin file, index, and readme file containing dbNSFP annotations" }
  dbnsfp_fields: { type: 'string?', doc: "csv string with desired fields to annotate. Use ALL to grab all",
    default: 'SIFT4G_pred,Polyphen2_HDIV_pred,Polyphen2_HVAR_pred,LRT_pred,MutationTaster_pred,MutationAssessor_pred,FATHMM_pred,PROVEAN_pred,VEST4_score,VEST4_rankscore,MetaSVM_pred,MetaLR_pred,MetaRNN_pred,M-CAP_pred,REVEL_score,REVEL_rankscore,PrimateAI_pred,DEOGEN2_pred,BayesDel_noAF_pred,ClinPred_pred,LIST-S2_pred,Aloft_pred,fathmm-MKL_coding_pred,fathmm-XF_coding_pred,Eigen-phred_coding,Eigen-PC-phred_coding,phyloP100way_vertebrate,phyloP100way_vertebrate_rankscore,phastCons100way_vertebrate,phastCons100way_vertebrate_rankscore,TWINSUK_AC,TWINSUK_AF,ALSPAC_AC,ALSPAC_AF,UK10K_AC,UK10K_AF,gnomAD_exomes_controls_AC,gnomAD_exomes_controls_AN,gnomAD_exomes_controls_AF,gnomAD_exomes_controls_nhomalt,gnomAD_exomes_controls_POPMAX_AC,gnomAD_exomes_controls_POPMAX_AN,gnomAD_exomes_controls_POPMAX_AF,gnomAD_exomes_controls_POPMAX_nhomalt,gnomAD_genomes_flag,gnomAD_genomes_AC,gnomAD_genomes_AN,gnomAD_genomes_AF,gnomAD_genomes_nhomalt,gnomAD_genomes_POPMAX_AC,gnomAD_genomes_POPMAX_AN,gnomAD_genomes_POPMAX_AF,gnomAD_genomes_POPMAX_nhomalt,gnomAD_genomes_controls_and_biobanks_AC,gnomAD_genomes_controls_and_biobanks_AN,gnomAD_genomes_controls_and_biobanks_AF,gnomAD_genomes_controls_and_biobanks_nhomalt,clinvar_id,clinvar_clnsig,clinvar_trait,clinvar_review,clinvar_hgvs,clinvar_var_source,clinvar_MedGen_id,clinvar_OMIM_id,clinvar_Orphanet_id,Interpro_domain,GTEx_V8_gene,GTEx_V8_tissue'
    }
  merged: { type: 'boolean?', doc: "Set to true if merged cache used", default: true }
  cadd_indels: { type: 'File?', secondaryFiles: [.tbi], doc: "VEP-formatted plugin file and index containing CADD indel annotations" }
  cadd_snvs: { type: 'File?', secondaryFiles: [.tbi], doc: "VEP-formatted plugin file and index containing CADD SNV annotations" }
  run_cache_existing: { type: boolean, doc: "Run the check_existing flag for cache" }
  run_cache_af: { type: boolean, doc: "Run the allele frequency flags for cache" }

  # annotation vars
  genomic_hotspots: { type: 'File[]?', doc: "Tab-delimited BED formatted file(s) containing hg38 genomic positions corresponding to hotspots" }
  protein_snv_hotspots: { type: 'File[]?', doc: "Column-name-containing, tab-delimited file(s) containing protein names and amino acid positions corresponding to hotspots" }
  protein_indel_hotspots: { type: 'File[]?', doc: "Column-name-containing, tab-delimited file(s) containing protein names and amino acid position ranges corresponding to hotspots" }
  retain_info: {type: 'string?', doc: "csv string with INFO fields that you want to keep", default: "MQ,MQ0,CAL,HotSpotAllele"}
  retain_fmt: {type: 'string?', doc: "csv string with FORMAT fields that you want to keep"}
  retain_ann: { type: 'string?', doc: "csv string of annotations (within the VEP CSQ/ANN) to retain as extra columns in MAF" }
  add_common_fields: {type: 'boolean?', doc: "Set to true if input is a strelka2 vcf that hasn't had common fields added", default: false}
  bcftools_annot_columns: {type: 'string?', doc: "csv string of columns from annotation to port into the input vcf, i.e INFO/AF", default: "INFO/AF"}
  bcftools_strip_columns: {type: 'string?', doc: "csv string of columns to strip if needed to avoid conflict, i.e INFO/AF"}
  bcftools_annot_vcf: {type: 'File?', secondaryFiles: ['.tbi'], doc: "additional bgzipped annotation vcf file"}
  bcftools_public_filter: {type: 'string?', doc: "Will hard filter final result to create a public version", default: FILTER="PASS"|INFO/HotSpotAllele=1}
  gatk_filter_name: {type: 'string[]', doc: "Array of names for each filter tag to add, recommend: [\"NORM_DP_LOW\", \"GNOMAD_AF_HIGH\"]"}
  gatk_filter_expression: {type: 'string[]', doc: "Array of filter expressions to establish criteria to tag variants with. See https://gatk.broadinstitute.org/hc/en-us/articles/360036730071-VariantFiltration, recommend: \"vc.getGenotype('\" + inputs.input_normal_name + \"').getDP() <= 7\"), \"AF > 0.001\"]"}
  disable_hotspot_annotation: { type: 'boolean?', doc: "Disable Hotspot Annotation and skip this task.", default: true }
  maf_center: {type: 'string?', doc: "Sequencing center of variant called", default: "."}

outputs:
  annotated_protected_outputs: {type: 'File[]', outputSource: annotate/annotated_protected}
  annotated_public_outputs: {type: 'File[]', outputSource: annotate/annotated_public}

steps:
  prep_mnp_variants:
    run: ../tools/prep_mnp_variants.cwl
    in:
      strelka2_vcf: strelka2_vcf
      other_vcfs: [mutect2_vcf, lancet_vcf, vardict_vcf]
      output_basename: output_basename
    out: [output_vcfs]

  consensus_merge:
    run: ../tools/consensus_merge.cwl
    in:
      strelka2_vcf:
        source: prep_mnp_variants/output_vcfs
        valueFrom: '$(self[0])'
      mutect2_vcf: mutect2_vcf
      lancet_vcf: lancet_vcf
      vardict_vcf: vardict_vcf
      cram: cram
      ncallers: ncallers
      ram: consensus_ram
      reference: indexed_reference_fasta
      output_basename: output_basename
      hotspot_source: hotspot_source
      contig_bed: contig_bed
    out: [output]

  annotate:
    run: ../sub_workflows/kfdrc_annot_vcf_sub_wf.cwl
    in:
      indexed_reference_fasta: indexed_reference_fasta
      input_vcf: consensus_merge/output
      input_tumor_name: input_tumor_name
      input_normal_name: input_normal_name
      add_common_fields: add_common_fields
      retain_info: retain_info
      retain_fmt: retain_fmt
      retain_ann: retain_ann
      bcftools_annot_columns: bcftools_annot_columns
      bcftools_strip_columns: bcftools_strip_columns
      bcftools_annot_vcf: bcftools_annot_vcf
      bcftools_public_filter: bcftools_public_filter
      dbnsfp: dbnsfp
      dbnsfp_fields: dbnsfp_fields
      merged: merged
      cadd_indels: cadd_indels
      cadd_snvs: cadd_snvs
      run_cache_af: run_cache_af
      run_cache_existing: run_cache_existing
      gatk_filter_name: gatk_filter_name
      gatk_filter_expression: gatk_filter_expression
      vep_cache: vep_cache
      vep_ref_build: vep_ref_build
      disable_hotspot_annotation: disable_hotspot_annotation
      genomic_hotspots: genomic_hotspots
      protein_snv_hotspots: protein_snv_hotspots
      protein_indel_hotspots: protein_indel_hotspots
      maf_center: maf_center
      output_basename: output_basename
      tool_name: tool_name
    out: [annotated_protected, annotated_public]

$namespaces:
  sbg: https://sevenbridges.com
"sbg:license": Apache License 2.0
"sbg:publisher": KFDRC
